#png(width= 750, filename <- paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data <- dat.MODIS, mapping = aes(x = greenup.year, y = greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping = aes(color <- BAND)) +
geom_point(mapping = aes(color <- 'orange', size = .5)) +
geom_text(mapping = aes(label = greenup.yday, color <- 'black', size = 5)) +
scale_x_continuous('YEAR', breaks = c(from = '1995', '2020'))
#png(width= 750, filename <- paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data <- dat.MODIS, mapping = aes(x = greenup.year, y = greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping = aes(color <- BAND)) +
geom_point(mapping = aes(color <- 'orange', size = .5)) +
geom_text(mapping = aes(label = greenup.yday, color <- 'black', size = 5)) +
scale_x_continuous('YEAR', breaks = seq(from = '1995', '2020', by = 1))
#png(width= 750, filename <- paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data <- dat.MODIS, mapping = aes(x = greenup.year, y = greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping = aes(color <- BAND)) +
geom_point(mapping = aes(color <- 'orange', size = .5)) +
geom_text(mapping = aes(label = greenup.yday, color <- 'black', size = 5)) +
labs('YEAR', breaks = seq(from = '1995', '2020', by = 1))
#png(width= 750, filename <- paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data <- dat.MODIS, mapping = aes(x = greenup.year, y = greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping = aes(color <- BAND)) +
geom_point(mapping = aes(color <- 'orange', size = .5)) +
geom_text(mapping = aes(label = greenup.yday, color <- 'black', size = 5)) +
labs('YEAR') # breaks = seq(from = '1995', '2020', by = 1))
#png(width= 750, filename <- paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data <- dat.MODIS, mapping = aes(x = greenup.year, y = greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping = aes(color <- BAND)) +
geom_point(mapping = aes(color <- 'orange', size = .5)) +
geom_text(mapping = aes(label = greenup.yday, color <- 'black', size = 5)) +
xlab('YEAR') +
ylab('DATE (YDAY)')
greenup.year
dat.MODIS$greenup.year
#png(width= 750, filename=  paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data= dat.MODIS, mapping= aes(x= greenup.year, y= greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping= aes(color= BAND)) +
geom_point(color= 'orange', size= .5) +
geom_text(label= dat.MODIS$greenup.yday, color= 'black', size = 5) +
scale_x_continuous('YEAR', breaks= seq(from= '1995', to='2020', by= 1 )) +
scale_y_continuous('DATE (YDay)', breaks= days.mrk$mrk.yday, labels= days.mrk$Label)
#png(width= 750, filename=  paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data <- dat.MODIS, mapping= aes(x= greenup.year, y= greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping= aes(color= BAND)) +
geom_point(color= 'orange', size= .5) +
geom_text(label= dat.MODIS$greenup.yday, color= 'black', size = 5) +
scale_x_continuous('YEAR', breaks= seq(from= '1995', to='2020', by= 1 )) +
scale_y_continuous('DATE (YDay)', breaks= days.mrk$mrk.yday, labels= days.mrk$Label)
#png(width= 750, filename=  paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data <- dat.MODIS, mapping <- aes(x= greenup.year, y= greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping= aes(color= BAND)) +
geom_point(color= 'orange', size= .5) +
geom_text(label= dat.MODIS$greenup.yday, color= 'black', size = 5) +
scale_x_continuous('YEAR', breaks= seq(from= '1995', to='2020', by= 1 )) +
scale_y_continuous('DATE (YDay)', breaks= days.mrk$mrk.yday, labels= days.mrk$Label)
#png(width= 750, filename=  paste0('MODIS_Plot_', site.id, '.png')) un-commment and run to save plot
ggplot(data = dat.MODIS, mapping = aes(x= greenup.year, y= greenup.yday)) +
ggtitle('MODIS Greenup and Midgreenup') +
geom_line(mapping= aes(color= BAND)) +
geom_point(color= 'orange', size= .5) +
geom_text(label= dat.MODIS$greenup.yday, color= 'black', size = 5) +
scale_x_continuous('YEAR', breaks= seq(from= '1995', to='2020', by= 1 )) +
scale_y_continuous('DATE (YDay)', breaks= days.mrk$mrk.yday, labels= days.mrk$Label)
# Storing the raw MODIS output
if(!dir.exists("../data_raw/MODIS")) dir.create("../data_raw/MODIS")
write.csv(dat.MODIS, file.path("../data_raw/MODIS/", paste0("MODIS_Greenup_", site.id, ".csv")), row.names=F)
#This script will serve to download the daymet weather data for every location we use for a set of years
#Setting the points to download the daymet data from
path.daymet <- '../data_raw/DAYMET'
if(!dir.exists(path.daymet)) dir.create(path.daymet)
# Note: We will probably want this to go by species, rather than site, but for now this works
site.id = 'MortonArb'
# This will probably get changed to a list of sites that we have NPN data for for each species
dat.MODIS <- read.csv(file.path('../data_raw/DAYMET', paste0("MODIS_Greenup_", site.id, ".csv")))
# This will probably get changed to a list of sites that we have NPN data for for each species
dat.MODIS <- read.csv(file.path('../data_raw/MODIS', paste0("MODIS_Greenup_", site.id, ".csv")))
summary(dat.MODIS)
summary(dat.MODIS)
# Creating a point list and time range that matches your MODIS dataset
# Note: This will probably change down the road
modis.pts <- aggregate(greenup.year~site+latitude+longitude, data=dat.MODIS,
FUN=min)
names(modis.pts)[4] <- "yr.start"
modis.pts$yr.end <- aggregate(greenup.year~site+latitude+longitude, data=dat.MODIS,
FUN=max)[,4]
modis.pts
#Writing the csv file of lat and longs because daymetr batch function needs to read a file instead of a dataframe
write.csv(modis.pts, file.path(path.daymet, paste0("TEST_POINTS_", site.id, ".csv")), row.names=FALSE)
# if(!dir.exist(path.daymet)) dir.create(path.daymet)
#Downloading all of the daymet data for each point. Internal =TRUE means it creates a nested list. Set false to actually download a file
lat.list <- daymetr::download_daymet_batch(file_location = file.path(path.daymet, paste0("TEST_POINTS_", site.id, ".csv")),
start = min(modis.pts$yr.start),
end = max(modis.pts$yr.end),
internal = T)
# This gives us a list with one layer per site (I think)
length(lat.list)
names(lat.list) <- modis.pts$site # Giving the different layers of the list the site names they correspond to
# class(lat.list[[1]])
summary(lat.list[[1]])
summary(lat.list[[1]][["data"]]) # Lets us look at the data for the first site
#Lets look at the structure of what we are given
summary(lat.list)
#This is the general format
lat.list[[1]]$latitude
# Creating a new simplified list that won't make Christy cranky
list.met <- list()
for(i in seq_along(lat.list)){
list.met[[i]] <- data.frame(site=modis.pts$site[i], latitude=modis.pts$latitude[i], longitude=modis.pts$longitude[i], lat.list[[i]]$data)
}
names(list.met) <-  modis.pts$site
summary(list.met)
summary(list.met[[1]])
rm(lat.list) # Removing lat.list to save memory
calc.gdd5 <- function(df.met){
df.met$Date <- as.Date(paste(df.met$year, df.met$yday, sep="-"), format="%Y-%j")
df.met$TMEAN <- (df.met$tmax..deg.c. + df.met$tmin..deg.c.)/2
df.met$GDD5 <- ifelse(df.met$TMEAN>5, df.met$TMEAN-5, 0)
df.met$GDD5.cum <- NA
for(YR in min(df.met$year):max(df.met$year)){
#df.yr is all weather data for a year at a location
df.yr <- df.met[df.met$year==YR,]
# Only calculate GDD5 if we have jan 1; this is Daymet, so it should be fine
if(min(df.yr$yday)==1){
# If we have Jan 1, calculate cumulative growing degree-days
df.yr$GDD5.cum <- cumsum(df.yr$GDD5)
} else {
# if we're missing Jan 1: still create the column, but don't fill it
df.yr$GDD5.cum <- NA
}
# Note: we could have done this differently,but :shrug: this is easier to diagnose
df.met[df.met$year==YR, "GDD5.cum"] <- df.yr$GDD5.cum
} # end year loop
return(df.met)
} # End funciton
# Apply our df.met function to all layers of our list;
# Note: we are overwriting the list, so be careful
list.met <- lapply(list.met, calc.gdd5)
summary(list.met[[1]])
# Unlist the met to save it to a dataframe that will be easier to share
df.met <- dplyr::bind_rows(list.met)
head(df.met)
# Quick graph to make sure things look okay
library(ggplot2)
ggplot(data=df.met) +
geom_line(aes(x=yday, y=GDD5.cum, group=year))
write.csv(df.met, file.path(path.daymet, paste0("TEST_DAYMET_", site.id, ".csv")), row.names=FALSE)
#could be changed to be individual species not site
path.MODIS <- '../data_raw/MODIS'
site.id <- 'MortonArb'
dat.MODIS <- read.csv(file.path('../data_raw/MODIS', paste0("MODIS_Greenup_", site.id, ".csv")))
summary(dat.MODIS)
df.met <- read.csv(file.path('../data_raw/DAYMET', paste0("TEST_DAYMET_", site.id, ".csv")))
summary(df.met)
View(Mod.Met)
Mod.Met <- merge(dat.MODIS, df.met)
View(Mod.Met)
ggplot(data = Mod.Met, mapping = aes(x = Mod.Met$yday, y = Mod.Met$GDD5.cum)) +
geom_point()
ggplot(data = Mod.Met, mapping = aes(x = yday, y = GDD5.cum)) +
geom_point()
ggplot(data = Mod.Met, mapping = aes(x = yday, y = GDD5.cum, group = year)) +
geom_line()
#packages
#library(MODISTools)
#library(ggplot2)
#library(daymetr)
library(xts)
#packages
#library(MODISTools)
#library(ggplot2)
#library(daymetr)
install.packages('xts')
#packages
#library(MODISTools)
#library(ggplot2)
#library(daymetr)
library(xts)
apply.yearly(df.met$yday, mean)
apply.yearly(df.met$Date, mean)
yearly.apply(df.met, INDEX = endpoints(df.met$year, on = "years"), FUN = mean)
period.apply(df.met, INDEX = endpoints(df.met$year, on = "years"), FUN = mean)
period.apply(df.met, INDEX = endpoints(year, on = "years"), FUN = mean)
period.apply(dat.MODIS, INDEX = endpoints(greenup.year, on = "years"), FUN = mean)
period.apply(dat.MODIS, INDEX = endpoints(dat.MODIS$greenup.year, on = "years"), FUN = mean)
library(lubridate)
Mod.Met <- as.POSIXct(c(start = '2001-01-01', end = '2017-12-31'))
summary(Mod.Met)
Mod.Met <-merge(dat.MODIS, df.met)
Mod.Met$greenup.year <- as.POSIXct(c(start = '2001-01-01', end = '2017-12-31'))
summary(Mod.Met)
Mod.Met$greenup.year <- as.POSIXct(c(start = '2001-01-01', end = '2017-12-31'))
YER <-strftime(Mod.Met, '%Y')
Mod.Met$greenup.year <- as.POSIXct(c('2001-01-01', '2017-12-31'))
YER <-strftime(Mod.Met, '%Y')
mo<- strftime(Mod.Met, '%m')
YER <-strftime(Mod.Met, '%Y')
df.met<- as.POSIXct(c("2011-02-01", "2011-02-01", "2011-02-01"))
mo <- strftime(df.met, "%m")
yr <- strftime(df.met, "%Y")
amt <- runif(3)
dd <- data.frame(mo, yr, amt)
df.met<- as.POSIXct(c(start = "2001-01-01", end = "2017-12-31"))
mo <- strftime(df.met, "%m")
yr <- strftime(df.met, "%Y")
amt <- runif(3)
dd <- data.frame(mo, yr, amt)
df.met<- as.POSIXct(c(start = "2001-01-01", end = "2017-12-31"))
mo <- strftime(df.met, "%m")
yr <- strftime(df.met, "%Y")
amt <- runif(16)
dd <- data.frame(mo, yr, amt)
View(dd)
dm <- interval(ymd_hms("2009-01-01 00:00:00"), ymd_hms("2010-02-02 01:01:01"))
summary(dm)
head(dm)
dm <- interval(ymd_hms("2009-01-01"), ymd_hms("2010-02-02"))
df.met<- as.POSIXct(c(as.period(span, unit = 'Year')))
df.met<- as.POSIXct(c(as.period(df.met$year, unit = 'Year')))
df.met<- as.POSIXct(c(as.period(df.met, unit = 'Year')))
df.met<- as.POSIXct(c(interval(Mod.Met$greenup.year)))
df.met<- as.POSIXct(Mod.Met, c(interval(Mod.Met$greenup.year)))
Mod.Met$greenup.year <- as.POSIXct(Mod.Met, c(interval(Mod.Met$greenup.year)))
Mod.Met$greenup.year <- as.POSIXct(c(interval(Mod.Met$greenup.year)))
Mod.Met$greenup.year <- as.POSIXct(interval(Mod.Met$greenup.year))
Mod.Met$greenup.year <- as.POSIXct(tz = '', interval(Mod.Met$greenup.year))
Mod.Met$greenup.year <- as.POSIXct(tz = '', interval(Mod.Met$greenup.year(as.Date())))
Mod.Met$greenup.year <- as.POSIXct(tz = '', interval(as.Date(Mod.Met$greenup.year)))
Mod.Met$greenup.year <- as.POSIXct(tz = '', strptime(Mod.Met$greenup.year))
Mod.Met$greenup.year <- as.POSIXct(tz = '', strptime(Mod.Met$greenup.year, format = '2001'))
View(Mod.Met$greenup.year)
Mod.Met$greenup.year <- as.POSIXct(strptime(Mod.Met$greenup.year, format = '2001'))
View(Mod.Met$greenup.year)
period.apply(dat.MODIS, INDEX = endpoints(dat.MODIS$greenup.year, on = "years"), FUN = mean)
period.apply(dat.MODIS, INDEX = endpoints(dat.MODIS$value_date, on = "years"), FUN = mean)
period.apply(dat.MODIS, INDEX = endpoints(dat.MODIS$nrows, on = "years"), FUN = mean)
df.met <- read.csv(file.path('../data_raw/DAYMET', paste0("TEST_DAYMET_", site.id, ".csv")))
summary(df.met)
Mod.Met <-merge(dat.MODIS, df.met)
apply.yearly(Mod.Met$value_date, mean)
apply.yearly(df.met$greenup.yday, mean)
apply.yearly(Mod.Met$yday, mean)
apply.yearly(strptime(Mod.Met$yday, format= mean))
apply.yearly(strptime(Mod.Met$yday, format= ))
apply.yearly(strptime(Mod.Met$yday, format= %Y ))
apply.yearly(strptime(Mod.Met$yday))
apply.yearly(strptime(Mod.Met$yday, format = '%Y'))
apply.yearly(strptime(Mod.Met$yday, format = '%Y'))
apply.yearly(strptime(Mod.Met$yday, format = '%Y'), FUN= mean)
d <- apply.yearly(strptime(Mod.Met$yday, format = '%Y'), FUN= mean)
View(d)
ggplot(data = Mod.Met, mapping = aes(x = yday, y = GDD5.cum, group = year)) +
geom_line()
#check to see what is left
names(Mod.Met)
write.csv(Mod.Met, file.path(path.MODIS, paste0("MOD_MET_", site.id, ".csv")), row.names=FALSE)
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
install.packages("devtools")
library('devtools')
devtools::install_github("usa-npn/rnpn")
# library('devtools')
devtools::install_github("usa-npn/rnpn")
library('devtools')
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
install.packages("devtools")
library('devtools')
devtools::install_github('ropensci/rnpn')
install.packages(checkmate)
install.packages("checkmate")
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
install.packages("devtools")
library('devtools')
devtools::install_github('ropensci/rnpn')
library(rnpn)
path.npn <- "../data_raw/NPN"
if(!dir.exists(path.npn)) dir.create(path.npn)
if(!dir.exists(file.path(path.npn, "npn_raw"))) dir.create(file.path(path.npn, "npn_raw"))
if(!dir.exists(file.path(path.npn, "summaries"))) dir.create(file.path(path.npn, "summaries"))
if(!dir.exists(file.path(path.npn, "summaries"))) dir.create(file.path(path.npn, "summaries"))
# -----------------------------------
# -----------------------------------
#npn_stations_with_spp
# Getting a list of all species
npn.spp <- npn_species()
npn.quercus <- npn.spp[npn.spp$genus=="Quercus",]
quercus.phenophase <- npn_get_phenophases_for_taxon(genus_ids=unique(npn.quercus$genus_id))
quercus.phenophase <- npn_get_phenophases_for_taxon(genus_ids=unique(npn.quercus$genus_id))
quercus.phenophase <- npn_get_phenophases_for_taxon(genus_ids=unique(npn.quercus$genus_id))
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
# install.packages("devtools")
# library('devtools')
# devtools::install_github("usa-npn/rnpn")
library(rnpn)
path.npn <- "../data_raw/NPN"
if(!dir.exists(path.npn)) dir.create(path.npn)
if(!dir.exists(file.path(path.npn, "npn_raw"))) dir.create(file.path(path.npn, "npn_raw"))
if(!dir.exists(file.path(path.npn, "summaries"))) dir.create(file.path(path.npn, "summaries"))
# -----------------------------------
# -----------------------------------
#npn_stations_with_spp
# Getting a list of all species
npn.spp <- npn_species()
npn.quercus <- npn.spp[npn.spp$genus=="Quercus",]
quercus.phenophase <- npn_get_phenophases_for_taxon(genus_ids=unique(npn.quercus$genus_id))
# -----------------------------------
# -----------------------------------
#npn_stations_with_spp
# Getting a list of all species
npn.spp <- npn_species()
npn.quercus <- npn.spp[npn.spp$genus == "Quercus",]
quercus.phenophase <- npn_get_phenophases_for_taxon(genus_ids=unique(npn.quercus$genus_id))
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
# install.packages("devtools")
# library('devtools')
devtools::install_github("usa-npn/rnpn")
path.npn <- "../data_raw/NPN"
if(!dir.exists(path.npn)) dir.create(path.npn)
if(!dir.exists(file.path(path.npn, "npn_raw"))) dir.create(file.path(path.npn, "npn_raw"))
if(!dir.exists(file.path(path.npn, "summaries"))) dir.create(file.path(path.npn, "summaries"))
# -----------------------------------
# -----------------------------------
#npn_stations_with_spp
# Getting a list of all species
npn.spp <- npn_species()
npn.quercus <- npn.spp[npn.spp$genus == "Quercus",]
quercus.phenophaze <- npn_
# To get pre-summarized data, use npn_donwload_individual_phenometrics
# to get help: ?npn_download_individual_phenometrics
# species_ids = what species you're interested in; just work with 1 at a time for now; can get rid of if you want everything from our Oak Collection
# station_ids=26202 gets just The Morton Arboretum Oak Collection (just for now)
# years = we can narrow this down, but we probably want everything we can get
# request_source = something the function needs so NPN knows whose using this
dat.npn <- npn_download_individual_phenometrics(species_ids=npn.quercus$species_id[npn.quercus$species=="alba"],
station_ids = 26202, years=2000:2020
, request_source="The Morton Arboretum")
dat.npn[dat.npn==-9999] <- NA
unique(dat.npn$phenophase_description)
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
install.packages("devtools")
install.packages("devtools")
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
install.packages("devtools")
library(devtools)
devtools::install_github("usa-npn/rnpn")
library(rnpn)
path.npn <- "../data_raw/NPN"
if(!dir.exists(path.npn)) dir.create(path.npn)
if(!dir.exists(file.path(path.npn, "npn_raw"))) dir.create(file.path(path.npn, "npn_raw"))
if(!dir.exists(file.path(path.npn, "summaries"))) dir.create(file.path(path.npn, "summaries"))
# -----------------------------------
# -----------------------------------
#npn_stations_with_spp
# Getting a list of all species
npn.spp <- npn_species()
npn.quercus <- npn.spp[npn.spp$genus == "Quercus",]
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
install.packages("devtools")
library('devtools')
library(checkmate)
library('devtools')
devtools::install_github("usa-npn/rnpn")
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
install.packages("devtools")
#library(checkmate)
library('devtools')
install.packages('backports')
#library(checkmate)
library('devtools')
devtools::install_github("usa-npn/rnpn")
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
# install.packages("devtools")
# library('devtools')
# devtools::install_github("usa-npn/rnpn")
library(rnpn)
path.npn <- "../data_raw/NPN"
if(!dir.exists(path.npn)) dir.create(path.npn)
if(!dir.exists(file.path(path.npn, "npn_raw"))) dir.create(file.path(path.npn, "npn_raw"))
if(!dir.exists(file.path(path.npn, "summaries"))) dir.create(file.path(path.npn, "summaries"))
# -----------------------------------
# -----------------------------------
#npn_stations_with_spp
# Getting a list of all species
npn.spp <- npn_species()
npn.quercus <- npn.spp[npn.spp$genus=="Quercus",]
quercus.phenophase <- npn_get_phenophases_for_taxon(genus_ids=unique(npn.quercus$genus_id))
# To get pre-summarized data, use npn_donwload_individual_phenometrics
# to get help: ?npn_download_individual_phenometrics
# species_ids = what species you're interested in; just work with 1 at a time for now; can get rid of if you want everything from our Oak Collection
# station_ids=26202 gets just The Morton Arboretum Oak Collection (just for now)
# years = we can narrow this down, but we probably want everything we can get
# request_source = something the function needs so NPN knows whose using this
dat.npn <- npn_download_individual_phenometrics(species_ids=npn.quercus$species_id[npn.quercus$species=="alba"],
station_ids = 26202, years=2000:2020
, request_source="The Morton Arboretum")
dat.npn[dat.npn==-9999] <- NA
unique(dat.npn$phenophase_description)
summary(dat.npn)
# Note: this has more phenophases that we actually want right now, but lets just stick with it
write.csv(dat.npn, file.path(path.npn, "TEST_MortonArb_QUAL.csv"), row.names=F)
# Doing another quick search for the Arb, but getting everything from our oak collection; note that it is MUCH slower
# We're also only get a couple phenophases that we actually care about for this project
phenophase.leaves <- unique(dat.npn$phenophase_id[dat.npn$phenophase_description %in% c("Breaking leaf buds", "Leaves", "Falling leaves")])
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
# install.packages("devtools")
# library('devtools')
devtools::install_github("usa-npn/rnpn")
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
# install.packages("devtools")
# library('devtools')
devtools::install_github("usa-npn/rnpn")
install.packages(Rtools)
# -----------------------------------
# NOTE: rnpn needs to be installed from GITHUB -- not CRAN!
#  i.e. you can NOT just do library('rnpn') -- you'll have an older version
# -----------------------------------
# install.packages("devtools")
# library('devtools')
# devtools::install_github("usa-npn/rnpn")
library(rnpn)
path.npn <- "../data_raw/NPN"
if(!dir.exists(path.npn)) dir.create(path.npn)
if(!dir.exists(file.path(path.npn, "npn_raw"))) dir.create(file.path(path.npn, "npn_raw"))
if(!dir.exists(file.path(path.npn, "summaries"))) dir.create(file.path(path.npn, "summaries"))
# -----------------------------------
# -----------------------------------
#npn_stations_with_spp
# Getting a list of all species
npn.spp <- npn_species()
npn.quercus <- npn.spp[npn.spp$genus=="Quercus",]
quercus.phenophase <- npn_get_phenophases_for_taxon(genus_ids=unique(npn.quercus$genus_id))
# To get pre-summarized data, use npn_donwload_individual_phenometrics
# to get help: ?npn_download_individual_phenometrics
# species_ids = what species you're interested in; just work with 1 at a time for now; can get rid of if you want everything from our Oak Collection
# station_ids=26202 gets just The Morton Arboretum Oak Collection (just for now)
# years = we can narrow this down, but we probably want everything we can get
# request_source = something the function needs so NPN knows whose using this
dat.npn <- npn_download_individual_phenometrics(species_ids=npn.quercus$species_id[npn.quercus$species=="alba"],
station_ids = 26202, years=2000:2020
, request_source="The Morton Arboretum")
dat.npn[dat.npn==-9999] <- NA
unique(dat.npn$phenophase_description)
summary(dat.npn)
# Note: this has more phenophases that we actually want right now, but lets just stick with it
write.csv(dat.npn, file.path(path.npn, "TEST_MortonArb_QUAL.csv"), row.names=F)
# Doing another quick search for the Arb, but getting everything from our oak collection; note that it is MUCH slower
# We're also only get a couple phenophases that we actually care about for this project
phenophase.leaves <- unique(dat.npn$phenophase_id[dat.npn$phenophase_description %in% c("Breaking leaf buds", "Leaves", "Falling leaves")])
phenophase.leaves
oak.leaf <- npn_download_individual_phenometrics(phenophase_ids =c(371, 471, 483), station_ids = 26202, years=2000:2020, request_source="The Morton Arboretum")
oak.leaf[oak.leaf==-9999] <- NA
summary(oak.leaf)
dim(oak.leaf)
length(unique(oak.leaf$species)) # 12 unique species
length(unique(oak.leaf$individual_id)) # 31 unique trees
write.csv(oak.leaf, file.path(path.npn, "TEST_MortonArb_OakCollection_PhenoLeaf.csv"), row.names=F)
summary(dat.npn)
View(dat.npn)
#packages
#library(MODISTools)
#library(ggplot2)
#library(daymetr)
#library(xts)
#could be changed to be individual species not site
path.MODIS <- '../data_raw/MODIS'
site.id <- 'MortonArb'
dat.MODIS <- read.csv(file.path('../data_raw/MODIS', paste0("MODIS_Greenup_", site.id, ".csv")))
summary(dat.MODIS)
df.met <- read.csv(file.path('../data_raw/DAYMET', paste0("TEST_DAYMET_", site.id, ".csv")))
summary(df.met)
summary(df.met)
